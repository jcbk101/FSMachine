local utils = require("modules.utils")
local fsm = require("modules.fsm_engine")

-- Super state: Contains shared functions
local playerState = require("player.states.playerState") -- State that contains shared functions
-- List of sub states
local idleState = require("player.states.idleState")
local runState = require("player.states.runState")
local crouchState = require("player.states.crouchState")
local crawlState = require("player.states.crawlState")
local jumpState = require("player.states.jumpState")
local airState = require("player.states.airState")
local wallState = require("player.states.wallState")
local fallState = require("player.states.fallState")
local landState = require("player.states.landState")
local hurtState = require("player.states.hurtState")
local confusedState = require("player.states.confusedState")
local frozenState = require("player.states.frozenState")
local stunState = require("player.states.stunState")
local deadState = require("player.states.deadState")

local ANGLE_THRESHOLD = 46
local NORMAL_THRESHOLD = 0.7


------------------------------------------------------------------------
--
-- Init code 
--
------------------------------------------------------------------------
function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("/camera", "acquire_camera_focus")
	--go.set_parent("/camera", ".")	
	msg.post("@render:", "use_camera_projection")

	-- Status effect sprite
	msg.post("#status_effect", "disable")
	msg.post("#counter", "disable")
	msg.post("#status", "disable")	

	self.sprSize = go.get("#sprite", "size")
	self.origin = go.get_position()
	self.velocity = vmath.vector3(0)
	self.ground_contact = nil
	self.correction = vmath.vector3()
	self.direction = 1
	self.slopeY = 0
	self.isOnSlope = nil

	self.states = {
		idle = idleState,
		run = runState,
		crouch = crouchState,
		crawl = crawlState,
		jump = jumpState,
		air = airState,
		--wall = wallState,
		fall = fallState,
		land = landState,
		hurt = hurtState,
		confused = confusedState,
		frozen = frozenState,
		stun = stunState,
		dead = deadState,
		rope = ropeState
	}

	-- Second argument is the state (table) the contaions shared functions. 
	-- It is optional, and this state is consider a 'super' state.
	self.fsm = fsm.createMachine(self.states, playerState) 
	self.fsm:changeState(self, "air")
end


------------------------------------
-- Input
------------------------------------
function on_input(self, action_id, action)
	self.fsm:input(self, action_id, action) -- Call to state machine

	-- DEBUG / TESTING PURPOSES
	if action_id == hash("freeze") and action.released then
		if self.frozen then 
			self.frozen = nil
			self.fsm:changeState(self, "idle")
		else
			self.frozen = true
			self.fsm:changeState(self, "frozen")
		end
	elseif action_id == hash("confuse") and action.released then
		if self.confused then 
			self.confused = nil
			self.fsm:changeState(self, "idle")
		else
			self.confused = true
			self.fsm:changeState(self, "confused")
		end
	elseif action_id == hash("stun") and action.released then
		if self.stun then 
			self.stun = nil
			self.fsm:changeState(self, "idle")
		else
			self.stun = true
			self.fsm:changeState(self, "stun")
		end
		elseif action_id == hash("hurt") and action.released then
		self.confused = true
		self.fsm:changeState(self, "hurt")
	elseif action_id == hash("death") and action.released then
		self.fsm:changeState(self, "dead")	
	end
end


------------------------------------
-- Update
------------------------------------
function fixed_update(self, dt)		
	self.fsm:fixed_update(self, dt) -- Call to state machine

	local pos = go.get_position()
	go.set_position(vmath.vector3(pos.x, pos.y, pos.z), "/camera")
end


---------------------------------
-- Collision code used with 
-- Kinematic bodies. Gives better
-- Control over Dynamic bodies
---------------------------------
local function handle_obstacle_contact(self, normal, distance, yAxis)

	local comp = vmath.vector3()
	local angle = utils.Angle(normal, vmath.vector3(0,1,0))

	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that do not overshoot.		
			comp = ((distance - distance * proj) * normal)

			-- Correct position when NOT on a slope. If on a slope, corection already handled
			if self.isOnSlope or self.is_wallSliding then
				comp.y = 0
				comp.x = 0
			end

			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- Collided with a wall. Stop horizontal movement	
	-- We Hit a wall when the angle is greater than the angle threshold
	if angle > ANGLE_THRESHOLD then
		self.wall_contact = true
		self.wall_side = math.abs(normal.x) == 1 and normal.x or nil
	end

	-- Collided with the ground
	if normal.y > NORMAL_THRESHOLD then
		self.ground_contact = true
	end

	-- Collided with the head on an ciling / object.
	-- Stop upward movement
	if normal.y < -NORMAL_THRESHOLD then		
		if self.velocity.y < 0.0 then
			self.velocity.y = self.velocity.y * 2  -- Prevent sticking to moving platforms
		else
			self.velocity.y = 0		
		end
	end
end

---------------------------------
-- Message system
---------------------------------
function on_message(self, message_id, message, sender)

	if message_id == hash("contact_point_response") then
		-- check that the object is something we consider an obstacle
		if message.group == hash("ground") or message.group == hash("object") then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	elseif message_id == hash("trigger_response") then
		self.canPush = message.enter
	end		
end


---------------------------------
-- Clean up
---------------------------------
function final(self)
	self.fsm.purge(self)

	for k, v in pairs(self.states) do
		self.states[k] = nil
	end

	-- Do not live in memory
	package.loaded["modules.fsm_engine"] = nil
	package.loaded["modules.utils"] = nil
	package.loaded["player.states.playerState"] = nil
	package.loaded["player.states.idleState"] = nil
	package.loaded["player.states.runState"] = nil
	package.loaded["player.states.crouchState"] = nil
	package.loaded["player.states.crawlState"] = nil
	package.loaded["player.states.jumpState"] = nil
	package.loaded["player.states.airState"] = nil
	package.loaded["player.states.fallState"] = nil
	package.loaded["player.states.wallState"] = nil	
	package.loaded["player.states.landState"] = nil
	package.loaded["player.states.hurtState"] = nil
	package.loaded["player.states.confusedState"] = nil
	package.loaded["player.states.frozenState"] = nil
	package.loaded["player.states.stunState"] = nil
	package.loaded["player.states.deadState"] = nil

	--------------------------------------------------
	self.states = nil
	utils = nil
	self.fsm = nil
	-- Garbage collection
	collectgarbage()
end

