local fsm = require("modules.fsm_engine")

local gravity = -2200
local jump_takeoff_speed = 1100
local max_speed = 500
local air_acceleration_factor = 0.8


---------------------------------
--
---------------------------------
local function getAnimationFrames(self, anim)

	local path = go.get("#sprite", "image")
	local ts_info = resource.get_atlas(path)

	for i = 1, #ts_info.animations do
		if hash(ts_info.animations[i].id) == anim then
			local frames, fps = go.get("#sprite", "frame_count"), ts_info.animations[i].fps
			local time = (1.0 / fps) * frames
			return { frames = frames, fps = fps, time = time }
		end
	end

	-- Default FPS
	local frames, fps = go.get("#sprite", "frame_count"), ts_info.animations[1].fps
	local time = (1.0 / 10.) * frames
	return { frames = frames, fps = fps, time = time }
end


------------------------------------
--
------------------------------------
local idleState = {
	init = function(self, parent)
		self.is_exiting = false
		--
		if go.get("#sprite", "animation") ~= hash("idle") then
			sprite.play_flipbook("#sprite", "idle")
		end
		parent.velocity.x = 0
	end,

	exit = function(self, parent)
		self.is_exiting = true
	end,

	input = function(self, parent, action_id, action)
		if not self.is_exiting then
			if (action_id == hash("left") or action_id == hash("right")) and (action.value and action.value > 0) then
				self:changeState(parent, "run")

			elseif action_id == hash("jump") and parent.states.jump:CanJump() then
				self:changeState(parent, "jump")
			end
		end		
	end,

	-- Local variables
	is_exiting = false
}


------------------------------------
--
------------------------------------
local jumpState = {

	init = function(self, parent)
		if self.jumpAmount > 0 then
			parent.velocity.y = jump_takeoff_speed * (self.jumpAmount == 2 and 1 or 0.75)
			sprite.play_flipbook("#sprite", "jump" .. self.jumpAmount)
			--
			self.animationDone = false  -- Play animation to completion
			self.jumpAmount = self.jumpAmount - 1
			parent.ground_contact = false
			--
			--parent.key[hash("jump")] = nil  -- Clear jump key
			self:changeState(parent, "air")
		end
	end,

	-- Condition test
	CanJump = function(self)
		return (self.jumpAmount > 0 and true or false)
	end,

	-- Local variables
	jumpAmount = 2,
	animationDone = true
}


------------------------------------
--
------------------------------------
local airState = {

	init = function(self, parent)
		self.is_exiting = false
	end,

	exit = function(self, parent)
		self.is_exiting = true
	end,

	input = function(self, parent, action_id, action)
		if not self.is_exiting then
			if (action_id == hash("left") or action_id == hash("right")) and (action.value and action.value ~= 0) then
				if action_id == hash("left") then
					sprite.set_hflip("#sprite", true)
					parent.velocity.x = -max_speed * air_acceleration_factor
				elseif action_id == hash("right") then
					sprite.set_hflip("#sprite", false)
					parent.velocity.x = max_speed * air_acceleration_factor				
				end
			else
				parent.velocity.x = 0
			end

			-- Test for air jump or abort jump
			if action_id == hash("jump") then
				if action and action.released then -- Abort the jump
					if parent.velocity.y > 0 then
						parent.velocity.y = parent.velocity.y * 0.5
					end
				elseif (action and action.pressed) and  parent.states.jump:CanJump() then
					parent.states.jump.jumpAmount = 1 -- Only allow air jump
					self:changeState(parent, "jump")
				end
			end
		end
	end,

	fixed_update = function(self, parent, dt)
		if not self.is_exiting then		
			-- Apply gravity
			if not parent.ground_contact then			
				parent.velocity.y = parent.velocity.y + (gravity * dt)
				if parent.velocity.y < -1250.0 then 
					parent.velocity.y = -1250.0
				end

				local pos = go.get_position()
				pos = (pos + parent.velocity * dt)
				go.set_position(pos)			
			else
				self:changeState(parent, "land")
			end
		end
	end,

	-- Local variables
	is_exiting = false
}


------------------------------------
--
------------------------------------
local landState = {

	init = function(self, parent)
		self.is_exiting = false
		parent.states.jump.jumpAmount = 2
		--		parent.states.jump.canDoubleJump = false
	end,

	exit = function(self, parent)
		self.is_exiting = true
	end,

	fixed_update = function(self, parent, dt)
		if not self.is_exiting then
			if parent.velocity.x ~= 0 then
				--		if parent.key[hash("left")] or parent.key[hash("right")] then
				print("running")
				self:changeState(parent, "run")
			else
				parent.velocity.x = 0
				self:changeState(parent, "idle")
			end
		end
	end,

	-- Local variables	
	is_exiting = false
}


------------------------------------
--
------------------------------------
local runState = {

	init = function(self, parent)
		self.is_exiting = false
		sprite.play_flipbook("#sprite", "run")
	end,

	exit = function(self, parent)
		self.is_exiting = true
	end,

	input = function(self, parent, action_id, action)
		if not self.is_exiting then			
			if action_id == hash("jump") and action.pressed and parent.states.jump:CanJump() then
				self:changeState(parent, "jump")

			elseif (action_id == hash("left") or action_id == hash("right")) then
				if (action.value and action.value == 0) then
					self:changeState(parent, "idle")
					parent.velocity.x = 0
				else
					if action_id == hash("left") and action.value and action.value > 0 then
						sprite.set_hflip("#sprite", true)
						parent.velocity.x = -max_speed
					elseif action_id == hash("right") and action.value and action.value > 0 then
						sprite.set_hflip("#sprite", false)
						parent.velocity.x = max_speed
					end					
				end
			end
		end			
	end,

	fixed_update = function(self, parent, dt)
		if not self.is_exiting then			
			local pos = go.get_position()
			pos = (pos + parent.velocity * dt)
			go.set_position(pos)			
		end
	end,

	is_exiting = false
}

------------------------------------
-- Init code 
------------------------------------
function init(self)
	msg.post(".", "acquire_input_focus")
	--msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

	self.origin = go.get_position()
	self.velocity = vmath.vector3(0)
	self.ground_contact = nil
	self.correction = vmath.vector3()
	--
	self.key = {}

	self.states = {
		idle = idleState,
		run = runState,
		air = airState,
		jump = jumpState,
		land = landState
	}

	--self.states.jump.init(self)

	self.fsm = fsm.createMachine(self.states)
	self.fsm:changeState(self, "air")
end


------------------------------------
-- Input
------------------------------------
function on_input(self, action_id, action)

	--Save status of key responses for testing
	-- if action.pressed then
	-- 	self.key[action_id] = true
	-- elseif action.released then
	-- 	self.key[action_id] = false
	-- end		

	self.fsm:input(self, action_id, action)
end


------------------------------------
-- Update
------------------------------------
function fixed_update(self, dt)
	-- Call state machine
	self.fsm:fixed_update(self, dt)
end


---------------------------------
-- Collision code used with 
-- Kinematic bodies. Gives better
--  control over Dynamic bodies
---------------------------------
-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)

	local comp = vmath.vector3()
	self.correction.x, self.correction.y, self.correction.z = 0, 0, 0

	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that do not overshoot.
			comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- Collided with a wall. Stop horizontal movement	
	if math.abs(normal.x) > 0.5 then
		print(normal) 
		self.wall_contact = true
	end

	-- collided with the ground
	if normal.y > 0.5 then
		self.ground_contact = true
	else
		self.ground_contact = nil		
	end


	-- Collided with the head on object. Stop upward movement
	if normal.y < -0.7 then		
		if self.velocity.y < 0.0 then
			self.velocity.y = self.velocity.y * 2
		else
			self.velocity.y = 0		
		end
	end
end

---------------------------------
-- Message system
---------------------------------
function on_message(self, message_id, message, sender)

	if message_id == hash("contact_point_response") then
		-- check that the object is something we consider an obstacle
		if message.group == hash("ground") then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end


function on_reload(self)
	go.set_position(self.origin)
end